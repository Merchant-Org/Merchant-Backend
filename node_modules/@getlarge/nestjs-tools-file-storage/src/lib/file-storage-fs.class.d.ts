import { BigIntStats, ObjectEncodingOptions, Stats } from 'node:fs';
import { Readable } from 'node:stream';
import type { FileStorage } from './file-storage.class';
import type { FileStorageBaseArgs, FileStorageConfig, FileStorageConfigFactory } from './file-storage.types';
import type { FileStorageLocalDeleteDir, FileStorageLocalDownloadStream, FileStorageLocalFileExists, FileStorageLocalGetFileMeta, FileStorageLocalReadDir, FileStorageLocalSetup, FileStorageLocalUploadFile, FileStorageLocalUploadStream } from './file-storage-fs.types';
import { FileStorageWritable, MethodTypes, Request } from './types';
export declare class FileStorageLocal implements FileStorage {
    readonly config: FileStorageConfig & Record<string, any>;
    constructor(setup: FileStorageLocalSetup, factory?: FileStorageConfigFactory<FileStorageConfig, FileStorageLocalSetup>);
    transformFilePath(fileName: string, methodType: MethodTypes, request?: Request, options?: any): string | Promise<string>;
    fileExists(args: FileStorageLocalFileExists): Promise<boolean>;
    moveFile(args: FileStorageBaseArgs & {
        newFilePath: string;
    }): Promise<void>;
    uploadFile(args: FileStorageLocalUploadFile): Promise<void>;
    uploadStream(args: FileStorageLocalUploadStream): Promise<FileStorageWritable>;
    downloadFile(args: {
        filePath: string;
        options: {
            encoding?: null;
            flag?: string;
        };
        request?: Request;
    }): Promise<Buffer>;
    downloadFile(args: {
        filePath: string;
        options: {
            encoding: BufferEncoding;
            flag?: string;
        } | BufferEncoding;
        request?: Request;
    }): Promise<string>;
    downloadFile(args: {
        filePath: string;
        options: (ObjectEncodingOptions & {
            flag?: string;
        }) | BufferEncoding | undefined | null;
        request?: Request;
    }): Promise<string | Buffer>;
    downloadFile(args: {
        filePath: string;
        request?: Request;
    }): Promise<Buffer>;
    downloadStream(args: FileStorageLocalDownloadStream): Promise<Readable>;
    deleteFile(args: FileStorageBaseArgs): Promise<boolean>;
    getFileMeta(args: FileStorageLocalGetFileMeta & {
        options: {
            bigint: false | undefined;
        };
    }): Promise<Stats>;
    getFileMeta(args: FileStorageLocalGetFileMeta & {
        options: {
            bigint: true;
        };
    }): Promise<BigIntStats>;
    deleteDir(args: FileStorageLocalDeleteDir): Promise<void>;
    readDir<R = string[]>(args: FileStorageLocalReadDir<R>): Promise<R>;
}
