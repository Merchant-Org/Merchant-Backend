import type { Readable } from 'node:stream';
import { FileStorageBaseArgs, FileStorageConfig, FileStorageDirBaseArgs, FileStorageDownloadFile, FileStorageDownloadStream, FileStorageFileExists, FileStorageGetFileMeta, FileStorageMoveFile, FileStorageReadDir, FileStorageTransformPath, FileStorageUploadFile, FileStorageUploadStream } from './file-storage.types';
import { FileStorageWritable } from './types';
export declare abstract class FileStorage {
    readonly config?: FileStorageConfig & Record<string, any>;
    transformFilePath: FileStorageTransformPath;
    fileExists(args: FileStorageFileExists): Promise<boolean>;
    moveFile(args: FileStorageMoveFile): Promise<void>;
    uploadFile(args: FileStorageUploadFile): Promise<void>;
    uploadStream(args: FileStorageUploadStream): Promise<FileStorageWritable>;
    downloadFile(args: FileStorageDownloadFile): Promise<Buffer>;
    downloadStream(args: FileStorageDownloadStream): Promise<Readable>;
    deleteFile(args: FileStorageBaseArgs): Promise<boolean>;
    getFileMeta(args: FileStorageGetFileMeta): Promise<any>;
    deleteDir(args: FileStorageDirBaseArgs): Promise<void>;
    readDir<R = string[]>(args: FileStorageReadDir<R>): Promise<R>;
}
