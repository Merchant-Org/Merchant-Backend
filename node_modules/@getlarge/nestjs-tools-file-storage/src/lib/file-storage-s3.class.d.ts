import { Readable } from 'node:stream';
import type { FileStorage } from './file-storage.class';
import type { FileStorageConfig, FileStorageConfigFactory } from './file-storage.types';
import type { FileStorageS3Config, FileStorageS3DeleteDir, FileStorageS3DeleteFile, FileStorageS3DownloadFile, FileStorageS3DownloadStream, FileStorageS3FileExists, FileStorageS3GetFileMeta, FileStorageS3GetFileMetaOutput, FileStorageS3MoveFile, FileStorageS3ReadDir, FileStorageS3Setup, FileStorageS3UploadFile, FileStorageS3UploadStream } from './file-storage-s3.types';
import { FileStorageWritable, MethodTypes, Request } from './types';
export declare class FileStorageS3 implements FileStorage {
    readonly config: FileStorageConfig & FileStorageS3Config;
    constructor(setup: FileStorageS3Setup, factory?: FileStorageConfigFactory<FileStorageS3Config, FileStorageS3Setup>);
    static extractRegionFromEndpoint(endpoint: string): string | null;
    transformFilePath(fileName: string, methodType: MethodTypes, request?: Request, options?: any): string | Promise<string>;
    fileExists(args: FileStorageS3FileExists): Promise<boolean>;
    moveFile(args: FileStorageS3MoveFile): Promise<void>;
    private upload;
    uploadFile(args: FileStorageS3UploadFile): Promise<void>;
    uploadStream(args: FileStorageS3UploadStream): Promise<FileStorageWritable>;
    downloadFile(args: FileStorageS3DownloadFile): Promise<Buffer>;
    downloadStream(args: FileStorageS3DownloadStream): Promise<Readable>;
    deleteFile(args: FileStorageS3DeleteFile): Promise<boolean>;
    getFileMeta(args: FileStorageS3GetFileMeta): Promise<FileStorageS3GetFileMetaOutput>;
    deleteDir(args: FileStorageS3DeleteDir): Promise<void>;
    readDir<R = string[]>(args: FileStorageS3ReadDir<R>): Promise<R>;
}
