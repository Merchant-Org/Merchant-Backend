"use strict";
var FileStorageModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorageModule = void 0;
exports.getFileStorageStrategy = getFileStorageStrategy;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const constants_1 = require("./constants");
const file_storage_service_1 = require("./file-storage.service");
const file_storage_fs_class_1 = require("./file-storage-fs.class");
const file_storage_google_class_1 = require("./file-storage-google.class");
const file_storage_s3_class_1 = require("./file-storage-s3.class");
const types_1 = require("./types");
function getFileStorageStrategy(storageType, config) {
    const { setup, factory } = config;
    switch (storageType) {
        case types_1.StorageType.FS:
            return new file_storage_fs_class_1.FileStorageLocal(setup, factory);
        case types_1.StorageType.S3:
            return new file_storage_s3_class_1.FileStorageS3(setup, factory);
        case types_1.StorageType.GC:
            return new file_storage_google_class_1.FileStorageGoogle(setup, factory);
        default:
            throw new TypeError(`Invalid storage type: ${storageType}`);
    }
}
let FileStorageModule = FileStorageModule_1 = class FileStorageModule {
    static forRoot(storageType, options = {
        [types_1.StorageType.FS]: { setup: { storagePath: 'store', maxPayloadSize: 1 } },
    }, isGlobal) {
        if (!(storageType in options)) {
            throw new TypeError(`${storageType} options is missing.`);
        }
        const fileStorage = getFileStorageStrategy(storageType, options[storageType]);
        const providers = [
            {
                provide: constants_1.FILE_STORAGE_STRATEGY_TOKEN,
                useValue: fileStorage,
            },
            file_storage_service_1.FileStorageService,
        ];
        return {
            module: FileStorageModule_1,
            global: isGlobal,
            providers,
            exports: providers,
        };
    }
    static forRootAsync(options, isGlobal) {
        const { inject = [], imports = [], useFactory } = options;
        const providers = [
            {
                provide: constants_1.FILE_STORAGE_STRATEGY_TOKEN,
                useFactory,
                inject,
            },
            file_storage_service_1.FileStorageService,
        ];
        return {
            module: FileStorageModule_1,
            global: isGlobal,
            imports,
            providers,
            exports: providers,
        };
    }
};
exports.FileStorageModule = FileStorageModule;
exports.FileStorageModule = FileStorageModule = FileStorageModule_1 = tslib_1.__decorate([
    (0, common_1.Module)({})
], FileStorageModule);
//# sourceMappingURL=file-storage.module.js.map