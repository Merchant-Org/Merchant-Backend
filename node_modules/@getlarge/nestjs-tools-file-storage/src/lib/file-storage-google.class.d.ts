import { type Readable } from 'node:stream';
import type { FileStorage } from './file-storage.class';
import type { FileStorageConfig, FileStorageConfigFactory } from './file-storage.types';
import type { FileStorageGoogleConfig, FileStorageGoogleDeleteDir, FileStorageGoogleDeleteFile, FileStorageGoogleDownloadFile, FileStorageGoogleDownloadStream, FileStorageGoogleFileExists, FileStorageGoogleGetFileMeta, FileStorageGoogleGetFileMetaOutput, FileStorageGoogleMoveFile, FileStorageGoogleReadDir, FileStorageGoogleSetup, FileStorageGoogleUploadFile, FileStorageGoogleUploadStream } from './file-storage-google.types';
import { FileStorageWritable, MethodTypes } from './types';
export declare class FileStorageGoogle implements FileStorage {
    readonly config: FileStorageConfig & FileStorageGoogleConfig;
    constructor(setup: FileStorageGoogleSetup, factory?: FileStorageConfigFactory<FileStorageGoogleConfig, FileStorageGoogleSetup>);
    transformFilePath(fileName: string, methodType: MethodTypes, request?: Request, options?: any): string | Promise<string>;
    fileExists(args: FileStorageGoogleFileExists): Promise<boolean>;
    moveFile(args: FileStorageGoogleMoveFile): Promise<void>;
    uploadFile(args: FileStorageGoogleUploadFile & {
        content: Buffer | string;
    }): Promise<void>;
    uploadStream(args: FileStorageGoogleUploadStream & {
        stream: Readable;
    }): Promise<FileStorageWritable>;
    downloadFile(args: FileStorageGoogleDownloadFile): Promise<Buffer>;
    downloadStream(args: FileStorageGoogleDownloadStream): Promise<Readable>;
    deleteFile(args: FileStorageGoogleDeleteFile): Promise<boolean>;
    getFileMeta(args: FileStorageGoogleGetFileMeta): Promise<FileStorageGoogleGetFileMetaOutput>;
    deleteDir(args: FileStorageGoogleDeleteDir): Promise<void>;
    readDir<R = string[]>(args: FileStorageGoogleReadDir<R>): Promise<R>;
}
